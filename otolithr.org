#+TITLE: otolithr 開発プロジェクトノート
#+PROPERTY: header-args :cache yes :exports code :results scalar
#+STARTUP: contents

#+BEGIN_SRC R
  setwd("otolithr")
#+END_SRC

#+RESULTS[8a4bc7aed74fdbd84bf3c88ba79c959332658351]:
: /Users/ahayashi/Documents/GitHub/tidyNAS

* パッケージのエコシステム
継続的インテグレーションを可能にする
** 耳石マシン
*** 自動チェック
データ更新がトリガー
- 日齢-体長関係を描画（耳石マシンにも体長データを入れておく）
- 日齢組成を描画
*** 自動マージ
** NAS
*** 自動チェック
**** データの品質
*** 自動ビルド
**** 目録の生成
**** 逆算
**** 描画
* 開発準備
#+BEGIN_SRC R :results silent
  # usethis::create_package("otolithr")
  usethis::use_testthat()
#+END_SRC
** 使用したパッケージ
#+BEGIN_SRC R
  usethis::use_package("magrittr", "Imports")
  usethis::use_package("ggplot2", "Imports")
#+END_SRC

#+RESULTS[74388f8cebf587e60c40ecf4173543e3668dc8ed]:

#+BEGIN_SRC sh
cat otolithr/DESCRIPTION
#+END_SRC

#+RESULTS[362fd202a9325dcbeafbf43e1712c3968b259db1]:
#+begin_example
Package: otolithr
Title: What the Package Does (one line, title case)
Version: 0.0.0.9000
Authors@R: person("First", "Last", email = "first.last@example.com", role = c("aut", "cre"))
Description: What the package does (one paragraph).
Depends: R (>= 3.5.1)
License: What license is it under?
Encoding: UTF-8
LazyData: true
RoxygenNote: 6.1.1
Suggests: 
    testthat
Imports: 
    magrittr,
    ggplot2
#+end_example

* 開発
** リロード & 自動テスト
#+BEGIN_SRC R :results output
  setwd("otolithr")
  devtools::load_all()
  system("R CMD INSTALL --preclean --no-multiarch --with-keep.source .")
  devtools::test()
  devtools::document(roclets=c('rd', 'collate', 'namespace'))
#+END_SRC

#+RESULTS[62d4820a9216b105c72787e032f80205ff1ada32]:
: No man pages found in package  ‘otolithr’ 
** テスト
*** テスト/ファイル名ハンドリング
:PROPERTIES:
:header-args: :results silent :exports code
:END:
#+BEGIN_SRC R :tangle otolithr/tests/testthat/test_fname.R
  library(otolithr)
  context("Handle file name")

  test_that("split_fname() split fname correctly", {
    fname <- "Sardinops-melanostictus_YK1508_MT6_10.hdr"
    split <- split_fname(fname)
    expect_equal(split[1], "Sardinops-melanostictus")
    expect_equal(split[2], "YK1508")
    expect_equal(split[3], "MT6")
    expect_equal(split[4], "10.hdr")
  })

  test_that("rm_extension() removes file extension correctly", {
    expect_equal(rm_extension("foo.hdr", ".hdr"), "foo")
    expect_equal(rm_extension("bar.txt", ".txt"), "bar")
    expect_equal(rm_extension("barhdr", ".hdr"), "barhdr")
    expect_equal(rm_extension("foo.hdr"), "foo")
    expect_error(rm_extension("foo.hdr", "hdr"),
                 "'extension' must begin with '.'")
  })

  test_that("xtract_var() detects given variable in given vector", {
    fname <- "Sardinops-melanostictus_YK1808_MT01_005.hdr"
    expect_equal(xtract_var(fname, "spcsname"), "Sardinops-melanostictus")
    expect_equal(xtract_var(fname, "cruise")  , "YK1808")
    expect_equal(xtract_var(fname, "stn")     , "MT01")
    expect_equal(xtract_var(fname, "sampleno"), "005")

    fname <- "Sardinops-melanostictus_20150827_Toyama_Nakase_005.hdr"
    expect_equal(xtract_var(fname, "spcsname"), "Sardinops-melanostictus")
    expect_equal(xtract_var(fname, "date")    , "20150827")
    expect_equal(xtract_var(fname, "key1")    , "Toyama")
    expect_equal(xtract_var(fname, "key2")    , "Nakase")
    expect_equal(xtract_var(fname, "sampleno"), "005")

    fname <- "Sardinops-melanostictus_20150827_Toyama_005.hdr"
    expect_equal(xtract_var(fname, "spcsname"), "Sardinops-melanostictus")
    expect_equal(xtract_var(fname, "date")    , "20150827")
    expect_equal(xtract_var(fname, "key1")    , "Toyama")
    expect_true(is.na(xtract_var(fname, "key2")))
    expect_equal(xtract_var(fname, "sampleno"), "005")
  })
#+END_SRC
*** テスト/ファイルパス
#+BEGIN_SRC R :tangle otolithr/tests/testthat/test_fpath.R
  library(otolithr)
  context("Manage path")

  test_that("get_path() gives file dir correctly", {
    expect_setequal(
      get_path("../Genus-spcs"),
      c("../Genus-spcs/commercial/foo/cannot_read/cannot.hdr",
        "../Genus-spcs/commercial/foo/data/Sardinops-melanostictus_foo_bar_01.hdr",
        "../Genus-spcs/commercial/foo/data/Sardinops-melanostictus_foo_bar_10.hdr",
        "../Genus-spcs/reared/foo/cannot_read/cannot.hdr",
        "../Genus-spcs/reared/foo/data/Sardinops-melanostictus_foo_bar_01.hdr",
        "../Genus-spcs/survey/mtfoo/cannot_read/cannot.hdr",
        "../Genus-spcs/survey/mtfoo/data/Sardinops-melanostictus_foo_MT01_01.hdr"))
  })


  test_that("get_dir2load() gives paths end with 'data/xxx.hdr'", {
    paths <- get_path("../Genus-spcs")
    expect_setequal(
      get_dir2load(paths),
      c("../Genus-spcs/commercial/foo/data/Sardinops-melanostictus_foo_bar_01.hdr",
        "../Genus-spcs/commercial/foo/data/Sardinops-melanostictus_foo_bar_10.hdr",
        "../Genus-spcs/reared/foo/data/Sardinops-melanostictus_foo_bar_01.hdr",
        "../Genus-spcs/survey/mtfoo/data/Sardinops-melanostictus_foo_MT01_01.hdr"))
  })

  test_that("fullpath2fname() extracts only fname from full path", {
    path <- get_path("../Genus-spcs")[1]
    expect_equal(fullpath2fname(path), "cannot.hdr")
  })
#+END_SRC
*** テスト/データタイプ（調査|漁獲物|飼育）
#+BEGIN_SRC R :tangle otolithr/tests/testthat/test_dattype.R
  library(otolithr)
  context("Control behavior according to dattype")

  test_that("set_type() gives type to fname correctly", {
    expect_is(set_type("foo.hdr", "survey"), "survey")
    expect_is(set_type("foo.hdr", "commercial"), "commercial")
    expect_error(set_type("foo.hdr", "bar"),
                 "'type' must be one of 'survey', 'commercial', or 'reared'.")
  })

  test_that("get_info.survey() makes sample metadata correctly", {
    fname <- "Sardinops-melanostictus_YK1508_MT6_10.hdr"
    info  <- get_info.survey(fname)
    expect_equal(info$type, "survey")
    expect_equal(info$spcs, "Sardinops-melanostictus")
    expect_equal(info$crs.name, "YK1508")
    expect_equal(info$stn, "MT6")
    expect_equal(info$sampleno, "10")
  })

  test_that("get_info.commercial() makes sample metadata correctly", {
    fname <- "Sardinops-melanostictus_20150827_Toyama_Nakase_005.hdr"
    info  <- get_info.commercial(fname)
    expect_equal(info$type, "commercial")
    expect_equal(info$spcs, "Sardinops-melanostictus")
    expect_equal(info$date, "20150827")
    expect_equal(info$key1, "Toyama")
    expect_equal(info$key2, "Nakase")
    expect_equal(info$sampleno, "005")
  })

  test_that("get_info.reared() makes sample metadata correctly", {
    fname <- "Sardinops-melanostictus_20160810_temp14_01.hdr"
    info  <- get_info.reared(fname)
    expect_equal(info$type, "reared")
    expect_equal(info$spcs, "Sardinops-melanostictus")
    expect_equal(info$date, "20160810")
    expect_equal(info$key1, "temp14")
    expect_true(is.na(info$key2))
    expect_equal(info$sampleno, "01")
  })

  test_that("detect_type() detects dattype correctly", {
    path_survey     <- "foo/survey/bar.hdr"
    path_commercial <- "foo/commercial/bar.hdr"
    path_reared     <- "foo/reared/bar.hdr"
    path_error      <- "foo/bar.hdr"
    msg <- "Dir structure error. Run 'help(detect_type)'."
    expect_equal(detect_type(path_survey),"survey")
    expect_equal(detect_type(path_commercial),"commercial")
    expect_equal(detect_type(path_reared),"reared")
    expect_error(detect_type(path_error), msg, fix = TRUE)
  })
#+END_SRC
*** テスト/hdr ファイルハンドリング
#+BEGIN_SRC R :tangle otolithr/tests/testthat/test_handle_hdr.R
  context("Load .hdr file")

  infile   <-
    "../Genus-spcs/survey/mtfoo/data/Sardinops-melanostictus_foo_MT01_01.hdr"
  data     <- load_hdr(infile)
  varnames <-  c("標本番号", "採集航海番号",  "採集ｽﾃｰｼｮﾝ番号", "採集日付",
                 "緯度", "経度", "表面水温", "体長", "体重", "耳石径", "耳左右",
                 "計測者番号", "日輪数", "lens", "calib", "unit",
                 "samplesize", "filename", "日輪幅")

  test_that("load_hdr() reads '.hdr' file correctly", {
    expect_is(data, "data.frame")
    expect_setequal(data$V1[1:19], varnames)
  })

  test_that("locate_1stinc() returns the position of first inc", {
    expect_equal(locate_1stinc(data$V1), 20)
  })

  test_that("get_incdata() returns incdata", {
    expect_equal(get_incdata(append(varnames, 1:10)), 1:10)
  })
#+END_SRC
*** 機能テスト
#+BEGIN_SRC R :tangle otolithr/tests/testthat/test_load_otolith.R
  context("Functional test")

  indir      <- "../Genus-spcs"
  paths      <- get_path(indir)
  paths2load <- get_dir2load(paths)[1]
  data       <- load_otolith(paths2load)

  test_that("load_otolith() loads otolith data", {
    expect_is(data$ninc, "integer")
  })
#+END_SRC
** 関数
*** ヘルパー関数
#+BEGIN_SRC R :tangle otolithr/R/util.R
  #' @importFrom magrittr %>%
  #' @export
  magrittr::`%>%`



  rm_extension <- function(x, extension = ".hdr") {
    if (gregexpr("^[a-zA-Z]+", extension) > 0)
      stop("'extension' must begin with '.'")
    regex <- paste0("\\", extension)
    out   <- sub(regex, "", x)
  }

  split_fname <- function(fname, sep = "_") {
  # This function may be unnecessary.
    split <- strsplit(fname, sep) %>%
      unlist() %>%
      as.vector()
    split
  }

  detect_type <- function(fpath) {
    regex <- "(survey|commercial|reared)"
    type  <- stringr::str_match(fpath, regex)[,2]
    if (is.na(type))
      stop("Dir structure error. Run 'help(detect_type)'.")
    type
  }

  set_type <- function(fname, type) {
    if (!(type %in% c("survey", "commercial", "reared")))
      stop("'type' must be one of 'survey', 'commercial', or 'reared'.")
    class(fname) <- type
    fname
  }

  xtract_var <- function(fname, var) {
    switch (var,
      "spcsname" = regex <- "(^[A-Z][a-z]+-[a-z]+)_",
      "cruise"   = regex <- "^[A-Z][a-z]+-[a-z]+_([A-Za-z0-9]+)_",
      "stn"      = regex <- "^[A-Z][a-z]+-[a-z]+_[A-Za-z0-9]+_([A-Za-z0-9]+)_",
      "date"     = regex <- "_(2[0-9]{7})_",
      "key1"     =
        regex <- "_2[0-9]{7}_([A-Za-z0-9]+)_(?:[A-Za-z]+_)?[a-zA-Z0-9]+\\.hdr$",
      "key2"     =
        regex <- "_2[0-9]{7}_(?:[A-Za-z]+)_([A-Za-z0-9]+)_[a-zA-Z0-9]+\\.hdr$",
      "sampleno" = regex <- "_([a-zA-Z0-9]+)\\.hdr$",
      "fname"    = regex <- "(^.+$)",
      stop(paste0("Unexpected variable '", eval(bquote(var)), "' was given."))
    )
    out <- stringr::str_match(fname, regex)[,2]
    out
  }


  get_info <- function(fname) {
    UseMethod("get_info")
  }

  get_info.survey <- function(fname) {
    out <- list()
    out$type     <- "survey"
    out$fname    <- xtract_var(fname, "fname")
    out$spcs     <- xtract_var(fname, "spcsname")
    out$crs.name <- xtract_var(fname, "cruise")
    out$stn      <- xtract_var(fname, "stn")
    out$sampleno <- xtract_var(fname, "sampleno")
    out
  }

  get_info.commercial <- function(fname) {
    out <- list()
    out$type     <- "commercial"
    out$fname    <- xtract_var(fname, "fname")
    out$spcs     <- xtract_var(fname, "spcsname")
    out$date     <- xtract_var(fname, "date")
    out$key1     <- xtract_var(fname, "key1")
    out$key2     <- xtract_var(fname, "key2")
    out$sampleno <- xtract_var(fname, "sampleno")
    out
  }

  get_info.reared <- function(fname) {
    out <- list()
    out$type     <- "reared"
    out$fname    <- xtract_var(fname, "fname")
    out$spcs     <- xtract_var(fname, "spcsname")
    out$date     <- xtract_var(fname, "date")
    out$key1     <- xtract_var(fname, "key1")
    out$key2     <- xtract_var(fname, "key2")
    out$sampleno <- xtract_var(fname, "sampleno")
    out
  }
#+END_SRC
*** hdr 読み込み
#+BEGIN_SRC R :tangle otolithr/R/handle_hdr.R
  load_hdr <- function(fname){
    read.csv(fname, fileEncoding = "CP932",
             header = FALSE, stringsAsFactors = FALSE)
  }

  locate_1stinc <- function(x) {
    which(x == "日輪幅") + 1 # Data of 1stinc is located just after "日輪幅".
  }

  get_incdata <- function(x) {
    str <- x
    out <- as.numeric(str[locate_1stinc(x):length(str)])
    out
  }
#+END_SRC
*** dir 以下全部のデータを読み込み
#+BEGIN_SRC R :tangle otolithr/R/load_otolith.R
  make_data <- function(fname, fname_with_type) {
    data     <- load_hdr(fname)
    out      <- get_info(fname_with_type)
    out$inc  <- get_incdata(data$V1)
    out$radius   <- cumsum(out$inc)
    out$ninc  <- length(out$iw)
    out
  }


  load_otolith <- function(dir) {
    type            <- detect_type(dir)
    fname_with_type <- fullpath2fname(dir) %>%
      set_type(type)
    out <- make_data(dir, fname_with_type)
    out
  }
#+END_SRC
*** パス関連
#+BEGIN_SRC R :tangle otolithr/R/fpath.R
  get_path <- function(dir.spcs) {
    regex <- ".+hdr$"
    fullpaths <- list.files(dir.spcs, pattern = regex,
                            full.names = TRUE, recursive = TRUE)
    fullpaths
  }

  fullpath2fname <- function(full.path) {
    regex <- "/([^/]+\\.hdr)$"
    if (length(full.path) == 1) {
      fname <- stringr::str_match(full.path, regex)[2]
    } else {
      match_res <- purrr::map2(full.path, regex, stringr::str_match) %>% unlist()
      fname     <- match_res[!(1:length(match_res))%%2]
    }
    fname
  }

  get_dir2load <- function(paths) {
    regex         <- ".+\\/data\\/.+\\.hdr$"
    (match_length <- purrr::map(regex, gregexpr, paths) %>% unlist())
    match_pos     <- which(match_length > 0)
    dir2load      <- paths[match_pos]
    dir2load
  }
#+END_SRC
** デモ
:PROPERTIES:
:header-args: :results output :exports both
:END:
#+BEGIN_SRC R
  devtools::load_all("otolithr")
  path <- "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus"

  print(".hdr ファイルがある全ディレクトリのリスト")
  dirs_org  <- get_path(path)
  head(dirs_org)
  tail(dirs_org)

  print("上記リストのうち，解析できなかった個体を除外したリスト")
  dirs2load <- dirs_org %>% get_dir2load()
  head(dirs2load)
  tail(dirs2load)

  print("フルパスをファイル名に変換")
  fnames    <- dirs2load %>%
    fullpath2fname()
  head(fnames)
  tail(fnames)

  print("サンプリング方法（調査|漁獲|飼育）を取得")
  types     <- purrr::map(dirs2load, detect_type) %>% unlist()
  head(types)
  tail(types)

  print("ファイル名にサンプリング方法を属性として付与")
  fnames_with_type <- purrr::map2(fnames, types, set_type)
  head(fnames_with_type, 2)
  tail(fnames_with_type, 2)

  print("ファイル名と属性をリスト化")
  info      <- purrr::map(fnames_with_type, get_info)
  str(info[[1]])
  str(info[[100]])
  str(info[[200]])

  print("データを読み込み")
  otldata <- purrr::map(dirs2load, load_otolith)
  otldata[[1]]
#+END_SRC

#+RESULTS:
#+begin_example
[1] ".hdr ファイルがある全ディレクトリのリスト"
[1] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_001.hdr"
[2] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_002.hdr"
[3] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_003.hdr"
[4] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_004.hdr"
[5] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_005.hdr"
[6] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_006.hdr"
[1] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_004.hdr"
[2] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_005.hdr"
[3] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_007.hdr"
[4] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_009.hdr"
[5] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_010.hdr"
[6] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_011.hdr"
[1] "上記リストのうち，解析できなかった個体を除外したリスト"
[1] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_001.hdr"
[2] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_002.hdr"
[3] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_003.hdr"
[4] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_004.hdr"
[5] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_005.hdr"
[6] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/commercial/data/Sardinops-melanostictus_20150827_Toyama_Nakase_006.hdr"
[1] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_004.hdr"
[2] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_005.hdr"
[3] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_007.hdr"
[4] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_009.hdr"
[5] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_010.hdr"
[6] "/Users/ahayashi/Documents/GitHub/otolith/ratocB/Sardinops_melanostictus/survey/YK1611/data/C1_011.hdr"
[1] "フルパスをファイル名に変換"
[1] "Sardinops-melanostictus_20150827_Toyama_Nakase_001.hdr"
[2] "Sardinops-melanostictus_20150827_Toyama_Nakase_002.hdr"
[3] "Sardinops-melanostictus_20150827_Toyama_Nakase_003.hdr"
[4] "Sardinops-melanostictus_20150827_Toyama_Nakase_004.hdr"
[5] "Sardinops-melanostictus_20150827_Toyama_Nakase_005.hdr"
[6] "Sardinops-melanostictus_20150827_Toyama_Nakase_006.hdr"
[1] "C1_004.hdr" "C1_005.hdr" "C1_007.hdr" "C1_009.hdr" "C1_010.hdr"
[6] "C1_011.hdr"
[1] "サンプリング方法（調査|漁獲|飼育）を取得"
[1] "commercial" "commercial" "commercial" "commercial" "commercial"
[6] "commercial"
[1] "survey" "survey" "survey" "survey" "survey" "survey"
[1] "ファイル名にサンプリング方法を属性として付与"
[[1]]
[1] "Sardinops-melanostictus_20150827_Toyama_Nakase_001.hdr"
attr(,"class")
[1] "commercial"

[[2]]
[1] "Sardinops-melanostictus_20150827_Toyama_Nakase_002.hdr"
attr(,"class")
[1] "commercial"

[[1]]
[1] "C1_010.hdr"
attr(,"class")
[1] "survey"

[[2]]
[1] "C1_011.hdr"
attr(,"class")
[1] "survey"

[1] "ファイル名と属性をリスト化"
List of 6
 $ fname   : chr "Sardinops-melanostictus_20150827_Toyama_Nakase_001.hdr"
 $ spcs    : chr "Sardinops-melanostictus"
 $ date    : chr "20150827"
 $ key1    : chr "Toyama"
 $ key2    : chr "Nakase"
 $ sampleno: chr "001"
 - attr(*, "class")= chr "commercial"
List of 5
 $ fname   : chr "Sardinops-melanostictus_YK1508_MT10_01.hdr"
 $ spcs    : chr "Sardinops-melanostictus"
 $ crs.name: chr "YK1508"
 $ stn     : chr "MT10"
 $ sampleno: chr "01"
 - attr(*, "class")= chr "survey"
List of 5
 $ fname   : chr "C1_011.hdr"
 $ spcs    : chr NA
 $ crs.name: chr NA
 $ stn     : chr NA
 $ sampleno: chr "011"
 - attr(*, "class")= chr "survey"
#+end_example
