#+TITLE: lucifer プロジェクトノート
#+PROPERTY: header-args :exports code :results scalar :session *R:lucifer*
#+STARTUP: contents
#+BEGIN_SRC R :results output
  devtools::load_all(); devtools::test()
  lintr::lint_package()

  devtools::document(roclets = c("rd", "collate", "namespace"))
  devtools::check(args = "--as-cran")
  covr::package_coverage()
#+END_SRC
* 目次                                                                :TOC_3:
- [[#開発セットアップ][開発セットアップ]]
  - [[#使用したパッケージ][使用したパッケージ]]
- [[#使ってみる][使ってみる]]
- [[#再ロードしてテストを実行][再ロードしてテストを実行]]
- [[#リリース][リリース]]
- [[#テスト][テスト]]
  - [[#fileteststestthattest_aomorir][file:tests/testthat/test_aomori.R]]
- [[#関数][関数]]
  - [[#データ読み込み][データ読み込み]]
  - [[#道具箱][道具箱]]
  - [[#戦う][戦う]]
  - [[#日付][日付]]
  - [[#パイプ][パイプ]]

* 開発セットアップ
#+BEGIN_SRC R
  # usethis::create_package("lucifer")

  usethis::use_mit_license("Akira Hayashi")
  usethis::use_coverage(type = "coveralls")
  usethis::use_lifecycle_badge("experimental")
#+END_SRC
** 使用したパッケージ
#+BEGIN_SRC R :results silent
  usethis::use_testthat("lucifer")
  usethis::use_package("magrittr")
  usethis::use_package("lubridate")
  usethis::use_package("stringr")
  usethis::use_package("purrr")
  usethis::use_dev_package("Nippon")
  usethis::use_package("cellranger")
  usethis::use_package("readr")
  usethis::use_package("rlang")
  usethis::use_package("tidyr")
  usethis::use_package("dplyr")
  usethis::use_package("stats")
  usethis::use_package("tibble")
  usethis::use_package("readxl")
  usethis::use_package("tidyselect")
#+END_SRC
* 使ってみる
	#+begin_src R
      fname <- "../../../Google Drive/gkk/2017年3月/各県資料/山口県/106回湊市場資料.xlsx"

      devtools::load_all()
      (a <- load_rect(fname, "2015", range = "A3:Z40"))

      devtools::load_all()
      a <- load_rect(fname, "2015", range = "A3:Z40") %>%
        unmerge_col(1, ".+") %>%
        unmerge_row(1, ".+月") %>%
        rm_sumrow(colname = "漁業種類", regex = "月") %>%
        merge_colname(rows = c(1, 2)) %>%
        make_ascii(1, rm = "\\s月") %>%
        rm_sumcol(row = 1, regex = "合計") %>%
        headerize(1) %>%
        dplyr::rename(month = `NA`) %>%
        data.frame()
      a
	#+end_src
* 再ロードしてテストを実行
* リリース
#+BEGIN_SRC R
  devtools::spell_check()
  devtools::release()
#+END_SRC
* テスト
#+BEGIN_SRC R :exports none :tangle tests/testthat/test_numdate.R
  # This file is tangled from lucifer.org.
  # (https://github.com/smxshxishxad/lucifer/lucifer.org)
  # Edit that file.

  context("Parse strings correctly")

  test_that("num2datei () convert numdate from Excel correctly", {
    expect_equal(num2datei(58), "1900-02-27")
    expect_equal(num2datei(59), "1900-02-28")
    expect_error(num2datei(60), "This date is not correct in Excel.")
    expect_equal(num2datei(61), "1900-03-01")
    expect_equal(num2datei(62), "1900-03-02")
  })

  test_that("get_datefmt() parse str into %Y-%m-%d format", {
    expect_equal(get_datefmt("20180101", 2018), "%Y%m%d")
    expect_equal(get_datefmt("0101", 2018), "%m%d")
    expect_equal(get_datefmt("43101", 2018), "XLjday")
    expect_equal(get_datefmt("43101", 2018), "XLjday")
    expect_equal(get_datefmt("H.30.01.01", 2018), "heisei")
    expect_equal(get_datefmt("H30.1.1", 2018), "heisei")
  })

  test_that("stdz_date() parse str into %Y-%m-%d format", {
    expect_equal(stdz_date("20180101", 2018), "2018-01-01")
    expect_equal(stdz_date("0101", 2018), "2018-01-01")
    expect_equal(stdz_date("43101", 2018), "2018-01-01")
    expect_equal(stdz_date("43101", 2018), "2018-01-01")
    expect_equal(stdz_date("H.30.01.01", 2018), "2018-01-01")
    expect_equal(stdz_date("H30.1.1", 2018), "2018-01-01")
    expect_error(stdz_date("1", 2018),
                 "Something's wrong with \"date\" data.", fix = TRUE)
  })

  test_that("num2date () convert numdate from Excel correctly", {
    expect_setequal(num2date(56:58), c("1900-02-25", "1900-02-26", "1900-02-27"))
  })

  test_that("is.jpdate() judge if given str is a jpdate", {
    expect_true(is.jpdate("H.29.8.22"))
    expect_true(is.jpdate("H29.8.22"))
    expect_false(is.jpdate("2000.8.22"))
  })

  test_that("split_jpdate() returns factors of jpdate", {
    split <- split_jpdate("H.29.08.22")
    expect_is(split, "list")
    expect_equal(split$era, "heisei")
    expect_equal(split$year, 29)
    expect_equal(split$month, 8)
    expect_equal(split$day, 22)
  })

  test_that("date2juliani() convert Japanese date to Julian day", {
    expect_equal(date2juliani("H.29.8.22"), 42969)
    expect_equal(date2juliani("H29.8.22"), 42969)
    expect_equal(date2juliani("2017.8.22"), 42969)
  })


  test_that("date2julian() convert Japanese date to Julian day", {
    expect_setequal(date2julian(c("H.29.8.22", "H.29.8.23")), c(42969, 42970))
    expect_setequal(date2julian(c("H.29.8.22", "H29-8-23")), c(42969, 42970))
    expect_setequal(date2julian(c("H.29.8.22", "H29-08-23")), c(42969, 42970))
  })
#+END_SRC
** file:tests/testthat/test_aomori.R

* 関数

** [[file:R/load_data.R][データ読み込み]]
** [[file:R/shapetools.R][道具箱]]
** [[file:R/rebel.R][戦う]]
** [[file:R/numdate.R][日付]]
** [[file:R/util.R][パイプ]]
