#+TITLE: tinyplyr プロジェクトノート
#+PROPERTY: header-args :exports code :results scalar :session *R:tidyNAS*
#+STARTUP: contents

* 目次                                                                :TOC_3:
- [[#開発セットアップ][開発セットアップ]]
  - [[#使用したパッケージ][使用したパッケージ]]
- [[#再ロードしてテストを実行][再ロードしてテストを実行]]
- [[#テスト][テスト]]
- [[#関数][関数]]

* 開発セットアップ
#+BEGIN_SRC R
  usethis::create_package("tinyplyr")
#+END_SRC
** 使用したパッケージ
#+BEGIN_SRC R :results silent
  devtools::use_testthat("tinyplyr")
#+END_SRC
* 再ロードしてテストを実行
#+BEGIN_SRC R :results output
  setwd("tinyplyr")
  devtools::load_all()
  system("R CMD INSTALL --preclean --no-multiarch --with-keep.source .")
  devtools::test()
  devtools::document(roclets=c('rd', 'collate', 'namespace'))
#+END_SRC
* テスト
#+BEGIN_SRC R :exports none :tangle tinyplyr/tests/testthat/test_util.R
  # -------------------------------------------------------------------.
  # This file is tangled from tinyplyr.org.                            |
  # (https://github.com/smxshxishxad/tidyNAS/blob/master/tinyplyr.org) |
  # Do not edit by hand.                                               |
  # ------------------------------------------------------------------'
  context("Parse strings correctly")

  test_that("num2datei () convert numdate from Excel correctly", {
    expect_equal(num2datei(58), "1900-02-27")
    expect_equal(num2datei(59), "1900-02-28")
    expect_error(num2datei(60), "This date is not correct in Excel.")
    expect_equal(num2datei(61), "1900-03-01")
    expect_equal(num2datei(62), "1900-03-02")
  })

  test_that("jpdate2julian() convert Japanese date to Julian day", {
    expect_equal(jpdate2julian(58), "H.29.8.22")
  test_that("is.jpdate() judge if given str is a jpdate", {
    expect_true(is.jpdate("H.29.8.22"))
    expect_true(is.jpdate("H29.8.22"))
    expect_false(is.jpdate("2000.8.22"))
  })

  })

  #+END_SRC

* 関数
#+BEGIN_SRC R :tangle tinyplyr/R/util.R :exports code
  # ----------------------------------------------------------------------------.
  # This file is tangled from tinyplyr.org.                                     |
  # (https://github.com/smxshxishxad/tinyplyr/blob/master/tinyplyrjmdatar.org)  |
  # Do not edit by hand.                                                        |
  # ---------------------------------------------------------------------------'

  num2datei <- function(x) {
    jday_march01 <- 60
    x            <- as.numeric(x)
    if (x == jday_march01) {
      stop("This date is not correct in Excel.")
    }
    if (x > jday_march01) {
      x <- x - 1 # because of leap year
    }
    x <- x - 1 # because of origin
    date <- as.character(as.Date(x, origin = "1900-01-01"))
  }

  num2date <- function(x) {
    out <- purrr::map(x, num2datei)
    unlist(out)
  }

  is.jpdate <- function(x) {
    stringr::str_detect(x, "[A-Z]\\.?[0-9]+\\..")
  }

#+END_SRC
