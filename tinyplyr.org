#+TITLE: tinyplyr プロジェクトノート
#+PROPERTY: header-args :exports code :results scalar :session *R:tinyplyr*
#+STARTUP: contents

* 目次                                                                :TOC_3:
- [[#開発セットアップ][開発セットアップ]]
  - [[#使用したパッケージ][使用したパッケージ]]
- [[#再ロードしてテストを実行][再ロードしてテストを実行]]
- [[#リリース][リリース]]
- [[#テスト][テスト]]
- [[#関数][関数]]

* 開発セットアップ
#+BEGIN_SRC R
  usethis::create_package("tinyplyr")

  usethis::use_mit_license("Akira Hayashi")
  usethis::use_coverage(type = "coveralls")
  usethis::use_package("magrittr")
  usethis::use_package("stringr")
  usethis::use_package("purrr")
  usethis::use_lifecycle_badge("experimental")
#+END_SRC
** 使用したパッケージ
#+BEGIN_SRC R :results silent
  devtools::use_testthat("tinyplyr")
#+END_SRC
* 再ロードしてテストを実行
#+BEGIN_SRC R :results output
  devtools::load_all()
  system("R CMD INSTALL --preclean --no-multiarch --with-keep.source .")
  lintr::lint_package()
  devtools::test()

  devtools::document(roclets=c('rd', 'collate', 'namespace'))
  devtools::check(args = "--as-cran")
  covr::package_coverage()
#+END_SRC
* リリース
#+BEGIN_SRC R
  devtools::spell_check()
  devtools::release()
#+END_SRC
* テスト
#+BEGIN_SRC R :exports none :tangle tests/testthat/test_numdate.R
  # This file is tangled from tinyplyr.org.
  # (https://github.com/smxshxishxad/tinyplyr/tinyplyr.org)
  # Edit that file.

  context("Parse strings correctly")

  test_that("num2datei () convert numdate from Excel correctly", {
    expect_equal(num2datei(58), "1900-02-27")
    expect_equal(num2datei(59), "1900-02-28")
    expect_error(num2datei(60), "This date is not correct in Excel.")
    expect_equal(num2datei(61), "1900-03-01")
    expect_equal(num2datei(62), "1900-03-02")
  })

  test_that("is.jpdate() judge if given str is a jpdate", {
    expect_true(is.jpdate("H.29.8.22"))
    expect_true(is.jpdate("H29.8.22"))
    expect_false(is.jpdate("2000.8.22"))
  })

  test_that("split_jpdate() returns factors of jpdate", {
    split <- split_jpdate("H.29.08.22")
    expect_is(split, "list")
    expect_equal(split$year, 29)
    expect_equal(split$month, 8)
    expect_equal(split$day, 22)
  })

  test_that("jpdate2juliani() convert Japanese date to Julian day", {
    expect_equal(jpdate2juliani("H.29.8.22"), 42969)
    expect_equal(jpdate2juliani("H29.8.22"), 42969)
  })

#+END_SRC

* 関数
#+BEGIN_SRC R :tangle R/numdate.R :exports code
  # This file is tangled from tinyplyr.org.
  # (https://github.com/smxshxishxad/tinyplyr/tinyplyr.org)
  # Edit that file.

  num2datei <- function(x) {
    jday_march01 <- 60
    x            <- as.numeric(x)
    if (x == jday_march01) {
      stop("This date is not correct in Excel.")
    }
    if (x > jday_march01) {
      x <- x - 1 # because of leap year
    }
    x    <- x - 1 # because of origin
    date <- as.character(as.Date(x, origin = "1900-01-01"))
    date
  }

  #' Convert Julian date (Microsoft Excel style: origin = 1900-01-01)
  #'   to \%Y-\%m-\%d
  #'
  #' @param x Julian day read from Excel spredsheets.
  #' @return Date character in %Y-%m-%d format.
  #' @examples
  #' num2date(43466)
  #' num2date(c(43466:43468, "43469"))
  #' @export
  num2date <- function(x) {
    out <- purrr::map(x, num2datei)
    out <- as.vector(unlist(out))
    out
  }

  #' Judge whether date string is written in Japanese Calendar or not
  #'
  #' @param x Date string. Both '.' and '-' are allowed for separaters.
  #' @return Bool.
  #' @examples
  #' is.jpdate("H31.1.1")
  #' is.jpdate("H31.01.01")
  #' is.jpdate("H31-01-01")
  #' is.jpdate("H3100-01-01")
  #' @export
  is.jpdate <- function(x) {
    stringr::str_detect(x, "[A-Z]\\.?[0-9]+(\\..|-)")
  }

  split_jpdate <- function(x) {
    initial <- substr(x, 1, 1)
    switch(initial,
         "H" = era <- "heisei")

    year  <- stringr::str_match(x, "^[A-Za-z]\\.?([0-9]+)(?:\\.|-)")[2]
    month <- stringr::str_match(x, "^[A-Za-z]\\.?[0-9]+(?:\\.|-)([0-9]+)")[2]
    day   <-
      stringr::str_match(x,
                         "^[A-Za-z]\\.?[0-9]+(?:\\.|-)[0-9]+(?:\\.|-)([0-9]+)"
                         )[2]
    out   <- list("era"   = era,
                  "year"  = as.numeric(year),
                  "month" = as.numeric(month),
                  "day"   = as.numeric(day)
                  )
    out
  }

  jpdate2juliani <- function(x) {
    if (is.jpdate(x) == TRUE) {
      split  <- split_jpdate(x)
      era    <- split$era
      switch(era,
             "heisei" = {
               year  <- split$year + 1988
               month <- split$month
               day   <- split$day
               date  <- as.Date(paste(year, month, day, sep = "-"))
             })
      jday <- julian.Date(date, origin = as.Date("1900-01-01"))
      jday <- jday + 1 # Correct origin difference
      jday <- jday + 1 # Correct leap year bug
    } else {
      jday <- x
    }
    as.numeric(jday[1])
  }

  #' Convert Japanese Calendar date to Excel Julian day
  #'
  #' @param x Date string in Japanes Calendar format.
  #' @return Julian day (Microsoft Excel style: origin = 1900-01-01).
  #' @examples
  #' jpdate2julian("H30.01.01")
  #' jpdate2julian("H30-01-01")
  #' jpdate2julian("H30.1.1")
  #' jpdate2julian("H30-1-1")
  #' @export
  jpdate2julian <- function(x) {
    out <- purrr::map(x, jpdate2juliani)
    out <- as.vector(unlist(out))
    out
  }
#+END_SRC

#+BEGIN_SRC R :tangle R/util.R :exports code
#' Pipe operator
#'
#' @name %>%
#' @rdname pipe
#' @keywords internal
#' @export
#' @importFrom magrittr %>%
#' @usage lhs \%>\% rhs
NULL
#+END_SRC
