#+TITLE: 漁海況予報会議のためのコード：カタクチイワシ3月時点の予報
#+AUTHOR: Akira Hayashi
* 関数の準備
#+BEGIN_SRC R :session *R:gyokaikyo*
  library(tidyverse)
  library(readxl)
  source("./make_list.R")
  source("./plot_figs.R")
  source("get_temp.R")
#+END_SRC

#+RESULTS:

* データの準備
#+BEGIN_SRC R :session *R:gyokaikyo*
  data <- make_list("/Users/ahayashi/Documents/GitHub/gyokaikyo/hayashi/各県いわし_181004_カタクチ.xlsx", 2018, sheet="カタクチイワシ") %>%
    make_database()
  temp <- get_tw_sst("/Users/ahayashi/Documents/GitHub/gyokaikyo/hayashi/data/漁海況データ（浮魚資源Gへ）.xlsx", 2018)
  survey   <- read_csv("/Users/ahayashi/Documents/GitHub/gyokaikyo/hayashi/data/survey_results.csv")
  stacdata <- read_csv("/Users/ahayashi/Dropbox/Imported/Stock/Timeseries_TW_Engraulis-japonicus.csv") %>%
    rename(year = Year,
           biomass = `B_10^3ton`,
           ssb = `SSB_10^3ton`)

  fmt_temp <- function(df, year.end, year.start = 1992) {
    years <- year.start:year.end
    temp_jan      <- vector("double", length(years))
    temp_aug      <- vector("double", length(years))
    temp_4_8_mean <- vector("double", length(years))
    temp_8_9_mean <- vector("double", length(years))

    levels_month <- month.abb
    temp_spread <- df %>%
      filter(year %in% years) %>%
      mutate(month = month.abb[month] %>%
                       parse_factor(levels = levels_month)) %>%
      spread(key = "month", value = "tw_degc")
    summed_temp <- temp_spread %>%
      group_by(year) %>%
      summarize(t_4_8 = mean(c(Apr, May, Jun, Jul, Aug), na.rm = TRUE),
                t_8_9 = mean(c(Aug, Sep), na.rm = TRUE))
    t_jan <- temp_spread$Jan
    t_aug <- temp_spread$Aug
    out   <- cbind(summed_temp, t_jan, t_aug)
    out
  }


  fmt_catch4model <- function(df, year.end, year.start = 1992) {
    years      <- year.start:year.end
    catch_11_3 <- vector("double", length(years))
    catch_4_8  <- vector("double", length(years))
    for (i in seq_along(years)) {
      yr <- years[i]
      catch_4_8[i] <- df %>%
        filter(year == yr & between(month, 4, 8)) %>%
        dplyr::select(catch_ton) %>%
        sum(na.rm = TRUE)
      if (yr == years[length(years)]) {
        catch_11_3[i]  <- NA
      } else {
        catch_11_12 <- filter(df, year == yr & (month == 11 | month == 12))
        catch_1_3   <- filter(df, year == yr + 1 & (between(month, 1, 3)))
        catch_11_3[i]  <- sum(catch_11_12$catch_ton, catch_1_3$catch_ton, na.rm = TRUE)
      }
    }
    out <- as.data.frame(cbind(years, catch_11_3, catch_4_8)) %>%
      rename(year = years)
    out
  }

  temp_formatted <- fmt_temp(temp, 2018)
  catch_formatted <- fmt_catch4model(data, 2018)
  dat4model <- left_join(catch_formatted, temp_formatted, by = "year")
  dat4model <- left_join(dat4model, stacdata, by = "year")
  dat4model <- left_join(dat4model, survey, by = "year") %>%
                 as.tibble()
  dat4model
#+END_SRC

#+RESULTS:
| 1992 |   6333.819 |    7656.049 | 22.5452631578947 | 27.1973684210526 |  18.059649122807 | 27.4017543859649 | 191 | 105 |  844 | 47 |         nil |         nil | nil |    nil |         nil |         nil |
| 1993 |   6092.258 |    7175.209 | 22.4326315789474 | 26.6868421052632 | 18.0438596491228 | 27.1070175438596 | 164 | 123 |  609 | 45 |         nil |         nil | nil |    nil |         nil |         nil |
| 1994 |   3705.085 |    3580.583 | 23.4259649122807 |  27.859649122807 |  17.940350877193 |  28.219298245614 | 145 | 108 |  771 | 44 |         nil |         nil | nil |    nil |         nil |         nil |
| 1995 |  11926.323 |    8974.473 | 22.8178947368421 | 28.1315789473684 |             18.8 |  28.859649122807 | 211 | 112 |  907 | 47 |         nil |         nil | nil |    nil |         nil |         nil |
| 1996 |    1997.95 |   12125.447 | 22.9361403508772 | 27.9201754385965 | 17.9614035087719 | 28.5228070175439 | 223 | 146 |  617 | 53 |         nil |         nil | nil |    nil |         nil |         nil |
| 1997 |  10184.303 |   14130.929 | 23.1466666666667 | 27.0859649122807 | 18.3982456140351 | 27.5473684210526 | 199 | 134 |  769 | 43 |        37.3 |       133.3 | nil |    nil |         nil |         nil |
| 1998 |   5192.108 |   12934.853 | 23.4084210526316 | 28.3368421052632 | 18.5263157894737 | 28.9122807017544 | 306 | 210 |  525 | 44 |        85.8 |       121.3 | nil |    nil |         nil |         nil |
| 1999 |   5363.381 |   14890.989 | 22.3242105263158 | 26.9728070175439 | 18.6175438596491 | 26.4964912280702 | 264 | 188 |  718 | 53 |        71.7 |        11.7 | nil |    nil |         nil |         nil |
| 2000 |   5575.689 |   11356.288 | 22.8378947368421 | 27.6859649122807 |  18.559649122807 | 28.3157894736842 | 257 | 147 |  969 | 54 |        89.3 |        98.1 |  79 |  10906 |         nil |         nil |
| 2001 |    854.755 |   16954.311 | 23.5694736842105 |  27.940350877193 | 18.3105263157895 | 29.2035087719298 | 130 |  88 |  904 | 56 |        96.8 |        33.4 |  88 |   2294 |         nil |         nil |
| 2002 |   3046.347 |   13753.886 | 23.3716140350877 | 27.7422514619883 | 17.8070175438596 | 27.9732748538012 | 141 |  68 | 1026 | 50 |        15.5 |        17.8 | 107 |   4854 |        85.8 |        60.3 |
| 2003 |  4400.1795 |  12827.9934 |           23.242 |            28.22 |            18.04 |            28.28 | 156 |  86 |  935 | 53 |        12.2 |         3.6 |  96 |  52153 |       597.8 |         9.6 |
| 2004 | 11225.5595 |   12635.337 |             23.9 |            28.08 |             18.9 |            29.26 | 139 |  76 | 1419 | 50 |       101.6 |        11.1 |  92 |  59546 |        93.2 | 65.92857143 |
| 2005 |   4935.046 |  16445.5608 |           23.474 |           28.275 |            19.18 |            28.91 | 159 |  91 | 1372 | 53 |       108.8 |         4.6 |  91 |  69585 |       815.1 |       37.72 |
| 2006 | 10737.1215 |   14113.609 |            22.99 |           28.535 |            17.66 |            29.53 | 178 |  86 | 1293 | 44 |        25.2 |        17.5 |  94 |  63377 |       250.5 |       41.71 |
| 2007 | 18305.5125 |   14363.082 |            23.36 |           28.585 |            18.74 |            29.23 | 247 | 180 |  700 | 38 |         134 |        17.9 |  91 |  35060 |      247.21 | 36.07692308 |
| 2008 |   394.2272 |  16097.8854 |           23.376 |            28.38 |            18.68 |            29.11 | 208 | 166 |  482 | 50 |        47.7 |           9 |  84 |   7786 | 202.9230769 |        67.2 |
| 2009 |  3661.8235 |   9468.4076 |           23.382 |            28.22 |            18.29 |            28.54 | 138 | 108 |  633 | 41 |        39.5 |         8.3 |  90 |   5037 | 475.1666667 | 208.0909091 |
| 2010 |  4206.8343 |  10921.7759 |           22.934 |           28.605 |             17.9 |            28.76 | 151 | 109 |  763 | 49 |         2.5 |        17.5 |  93 |   2561 | 928.5555556 |       25.23 |
| 2011 | 2596.41105 |  11049.4525 |           22.544 |           27.755 |            17.32 |            27.93 | 128 |  81 |  790 | 54 |         5.2 |        16.9 |  72 |  22328 | 687.8918919 |         3.5 |
| 2012 |  2061.7325 |  6513.37595 |             23.2 |            27.56 |            18.42 |            28.64 | 106 |  56 | 1070 | 51 |        17.9 |        13.3 |  72 |   9279 |       198.5 |        22.4 |
| 2013 | 4967.98492 |  11100.7837 |            24.07 |           28.875 |            17.74 |             29.8 | 101 |  71 |  851 | 52 |        85.7 |        19.8 |  70 |  35923 |      299.34 |        10.4 |
| 2014 |   7313.152 |   12861.357 |           22.716 |            27.59 |             18.3 |            27.49 | 120 |  78 |  732 | 54 |    37.75807 | 12.31566667 |  73 |  19124 |      173.46 | 214.4444444 |
| 2015 |   6944.575 |   10427.484 |            22.72 |           27.345 |            17.86 |            28.46 | 128 |  61 | 1133 | 52 | 108.7656919 |       67.37 |  72 | 116787 |       236.1 | 67.27272727 |
| 2016 |   4240.024 |   11397.228 |           24.236 |           28.845 |            18.99 |            30.55 | 103 |  66 |  958 | 53 | 24.41203114 |      11.411 |  77 |  73522 |         270 |        34.6 |
| 2017 |  2344.9275 | 13026.48775 |           24.088 |           28.835 |            19.43 |            29.74 | 104 |  57 | 1116 | 53 | 17.90634901 | 8.090769231 |  71 |  31663 | 217.1176471 |         nil |
| 2018 |        nil |  10762.3995 |            23.65 |           28.005 |             18.2 |            28.26 |  98 |  63 |  777 | 54 |         nil |         nil |  72 |  54880 |         nil |         nil |

* モデリング
#+BEGIN_SRC R :session *R:gyokaikyo*
  library(MASS)
  year4forcast <- 2000:2018
  dat4model$prev_11_3 <- NA
  for (i in 2:nrow(dat4model)) {
    dat4model[i, "prev_11_3"] <- dat4model[i-1, "catch_11_3"]
  }
  dat4model$prev_11_3
  dat4model <- dat4model %>%
    filter(year %in% year4forcast) %>%
    mutate(cpue.lar.apr = n.anchovy.neuston.april / n.tows.neuston.april)

  hist(log(dat4model$catch_11_3))
  dat_train    <- dat4model[-nrow(dat4model),]
  dat_forecast <- dat4model[nrow(dat4model),]
  resglm       <- glm(catch_11_3 ~ catch_4_8 + prev_11_3 + cpue.lar.apr + biomass, data = dat_train, family = gaussian(link = "log"))
  stepAIC(resglm)
  summary(resglm)

  prd_train    <- predict(resglm, newdat = dat_train, type = "response", se.fit = TRUE)

  catch_forecast   <- predict(resglm, newdata = dat_forecast, type = "response", se.fit = TRUE)
  dat_forecast$fit <- catch_forecast$fit
  dat_forecast$upr <- catch_forecast$fit + catch_forecast$se.fit * 1.96
  dat_forecast$lwr <- catch_forecast$fit - catch_forecast$se.fit * 1.96

  dat4plot <- dat_train %>%
    mutate(fit = prd_train$fit,
           upr = fit + prd_train$se.fit * 1.96,
           lwr = fit - prd_train$se.fit * 1.96)
  dat4plot <- bind_rows(dat4plot, dat_forecast)

  get_ref_values <- function(df) {
    yr_this <- max(df$year)
    yr_last <- yr_this - 1
    out     <- list(year = list(this = yr_this,
                                last = yr_last,
                                recent = (yr_last - 4):(yr_last),
                                all = df$year))
    catch_last   <- filter(df, year == out$year$last)$catch_11_3
    catch_recent <- filter(df, year %in% out$year$recent)$catch_11_3 %>%
                                                        mean() %>%
                                                        rep(length(out$year$recent))
    out$this = list(predict = filter(df, year == yr_this)$fit)

    out$last = list(catch = catch_last,
                    upr = catch_last * 1.2,
                    lwr = catch_last * 0.8)
    out$recent = list(catch = catch_recent,
                      upr = catch_recent * 1.2,
                      lwr = catch_recent * 0.8)
    out$all = list(fit = df$fit,
                   upr = df$upr,
                   lwr = df$lwr)
    out$real = list(novmar = df$catch_11_3,
                    apraug = df$catch_4_8)
    out
  }

  refs <- get_ref_values(dat4plot)

  param <- list(lwd = list(pred = 7,
                           real = 5,
                           axis = 4),
                lwd.axis = 2,
                pch = list(pred = 16,
                           real = 21),
                pcol = list(pred = hsv(20/360, 0.8, 0.7),
                            pred.bg = hsv(20/360, 0.4, 0.95),
                            real = hsv(0, 0, 0),
                            recent = hsv(0, 0, 0.3),
                            recent.bg = hsv(0, 0, 0.6, alpha = 0.7)),
                cex = list(pred = 5,
                           real = 4),
                cex.axis = 5,
                year = list(start = 2000,
                            end = 2018),
                myfont = "HiraKakuProN-W3")

  plot_axes <- function(param, ymax) {
   axis(1, at = seq(param$year$start, param$year$end, 1), labels = FALSE, lwd = param$lwd.axis, tcl = 0)
   axis(1, at = seq(param$year$start, param$year$end, 5), labels = FALSE, lwd = param$lwd.axis)
   axis(1, at = seq(param$year$start, param$year$end, 5), cex.axis = param$cex.axis, pos = -2, lwd = 0)
   axis(2, at = modelr::seq_range(0:ymax, 5, pretty = TRUE), cex.axis = param$cex.axis, lwd = param$lwd.axis)
  }
  plot_allfits <- function(refdata, param) {
    polygon(c(refdata$year$all, rev(refdata$year$all)), c(refdata$all$lwr/1000, rev(refdata$all$upr)/1000), col = param$pcol$pred.bg, border = FALSE)
    lines(refdata$year$all, refdata$all$fit/1000, col = param$pcol$pred, lwd = param$lwd$pred)
    points(refdata$year$this, refdata$this$predict/1000, pch = 16, cex = 5, col = param$pcol$pred)
  }
  plot_recent <- function(refdata, param) {
    polygon(c(refdata$year$recent, rev(refdata$year$recent)),
            c(refdata$recent$lwr/1000, rev(refdata$recent$upr)/1000), col = param$pcol$recent.bg, border = FALSE)
    lines(refdata$year$recent, refdata$recent$catch/1000, lwd = param$lwd$real, col = param$pcol$recent)
  }
  plot_real <- function(refdata, param, target = "kouki") {
    if (target == "kouki") {
      catch <- refdata$real$novmar
    } else {
      catch <- refdata$real$apraug
    }
    lines(refdata$year$all, catch / 1000, lwd = param$lwd$real, xpd = TRUE)
    points(refdata$year$all, catch / 1000, pch = param$pch$real,
           col = param$pcol$real, bg = "white",
           cex = param$cex$real, lwd = param$cex$real + 2, xpd = TRUE)
   arrows(refdata$year$last, refdata$last$lwr/1000, refdata$year$last, refdata$last$upr/1000, length = 0, lwd = param$lwd$real+3)
   points(refdata$year$last, refdata$last$catch/1000, pch = 21, cex = 4, bg = "white", lwd = param$lwd$real)
  }

  plot_forecast <- function(fname, refdata, param, target = "kouki") {
    png(fname, width = 1300, height = 800)
    par(family = param$myfont, omi = c(1.5, 1.5, 0.5, 0.5))
    ymax <- max(refdata$all$upr)/1000
    plot(refdata$year$all, refdata$all$fit / 1000, type = "n",
         axes = FALSE, ann = FALSE, yaxs = "i",
         xlim = c(param$year$start, param$year$end),
         ylim = c(0, ymax))
    plot_axes(param, ymax)
    plot_allfits(refdata, param)
    plot_recent(refdata, param)
    plot_real(refdata, param, target)
    mtext("漁獲量（千トン）", 2, cex = 5, line = 3, outer = TRUE)
    mtext("年", 1, cex = 5, line = 5, outer = TRUE)
    dev.off()
  }

  plot_forecast("../../figs/forecast.png", refs, param, "kouki")
#+END_SRC

#+RESULTS:
: 2


#色々な変数の組み合わせをためしてもフィットがよくない
data.glm2 <- glm(catch49 ~ temp1 + temp2 + catch12 + catch1, family = gaussian(link="identity"), data = data)
summary(data.glm2)
dredge(data.glm2) # 12月のcatchのみ



#####################################################################################

# GLM計算部 2015.3version 予測1&2
#data.glm <- glm(catch49 ~ temp1 + temp2 + catch12 + catch1, family = gaussian(link="identity"), data = data)
data.glm <- glm(catch49 ~ catch12 + catch1, family = gaussian(link="identity"), data = data) # 2014 model
summary(data.glm)
as.numeric(data.glm$fitted.values)
plot(data$year,data$catch49,type="l",ylim=c(0,20000))
lines(data$year,data.glm$fitted.values,col="red")

library(MuMIn)
options(na.action = "na.fail")
dredge(data.glm) # 12月のcatchのみ

# 信頼区間&予測区間
data.glm.conf <- predict(data.glm,se.fit=TRUE)
data.glm.conf$fit - qt(0.975,7) * data.glm.conf$se.fit
data.glm.conf$fit + qt(0.975,7) * data.glm.conf$se.fit
data.glm.pred <- sqrt(data.glm.conf$se.fit^2+data.glm.conf$residual.scale^2)
data.glm.conf$fit - qt(0.975,7) * data.glm.pred
data.glm.conf$fit + qt(0.975,7) * data.glm.pred

#　漁獲量予測部
data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, temp2=16.62, catch12=245.75, catch1=410.9),se.fit=TRUE) # for 2015　12月の鹿児島熊本は平年並みと仮定　予測2
data.prd$fit # 10596.21
data.prd$fit - qt(0.975,7) * data.prd$se.fit # 8534.428
data.prd$fit + qt(0.975,7) * data.prd$se.fit # 12658
data.prd$fit - qt(0.975,7) * sqrt(data.prd$se.fit^2+data.prd$residual.scale^2) # 5452.61
data.prd$fit + qt(0.975,7) * sqrt(data.prd$se.fit^2+data.prd$residual.scale^2) # 15739.82

data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, temp2=16.62, catch12=2893.5, catch1=410.9),se.fit=TRUE) # for 2015　12月の鹿児島熊本は実際の値　予測1
data.prd$fit # 28103.88
data.prd$fit - qt(0.975,7) * data.prd$se.fit # 10434.03
data.prd$fit + qt(0.975,7) * data.prd$se.fit # 45773.73
data.prd$fit - qt(0.975,7) * sqrt(data.prd$se.fit^2+data.prd$residual.scale^2) # 9816.474
data.prd$fit + qt(0.975,7) * sqrt(data.prd$se.fit^2+data.prd$residual.scale^2) # 46391.29

#####################################################################################

# GLM計算部 2015.3version　試し　1月の漁獲量のみ
data.glm <- glm(catch49 ~ catch1, family = gaussian(link="identity"), data = data) # 2014 model
summary(data.glm)
as.numeric(data.glm$fitted.values)
plot(data$year,data$catch48,type="l",ylim=c(0,20000))
lines(data$year,data.glm$fitted.values,col="red")

library(MuMIn)
options(na.action = "na.fail")
dredge(data.glm) # 12月のcatchのみ

#　漁獲量予測部
# heinen
data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, temp2=16.62, catch12=245.75, catch1=410.9),se.fit=TRUE) # for 2015　12月の鹿児島熊本は平年並みと仮定
data.prd$fit # 10503.64
data.prd$fit - 1.96 * data.prd$se.fit # 8359.009
data.prd$fit + 1.96 * data.prd$se.fit # 12648.28

#####################################################################################

# GLM計算部 2015.3 試し　1月の漁獲量と水温　悪くないが過去フィットが少し悪い
data.glm <- glm(catch49 ~ temp1 + catch1, family = gaussian(link="identity"), data = data)
summary(data.glm)
as.numeric(data.glm$fitted.values)
plot(data$year,data$catch48,type="l",ylim=c(0,20000))
lines(data$year,data.glm$fitted.values,col="red")

library(MuMIn)
options(na.action = "na.fail")
dredge(data.glm) # 1月のcatchのみ

#　漁獲量予測部
# heinen
data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, catch1=410.9),se.fit=TRUE) # for 2015
data.prd$fit # 10412.73
data.prd$fit - 1.96 * data.prd$se.fit # 8122.363
data.prd$fit + 1.96 * data.prd$se.fit # 12703.1

#####################################################################################

# GLM計算部 2014.3version
#data.glm <- glm(catch49 ~ temp1 + log(catch1) + ssb, family = Gamma(link="log"), data = data) # 2012年のモデル
data.glm <- glm(catch49 ~ temp1 + temp2 + catch12 + catch1, family = gaussian(link="identity"), data = data)
summary(data.glm)
as.numeric(data.glm$fitted.values)
plot(data$year,data$catch49,type="l",ylim=c(0,20000))
lines(data$year,data.glm$fitted.values,col="red")

library(MuMIn)
options(na.action = "na.fail")
dredge(data.glm) # 12月のcatchのみ

#　漁獲量予測部
# heinen
data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, temp2=16.62,catch12=2893.5,catch1=410.9),se.fit=TRUE) # for 2015
data.prd$fit # 31680 多すぎる
data.prd$fit - 1.96 * data.prd$se.fit # 12813.02
data.prd$fit + 1.96 * data.prd$se.fit # 50546.98

#####################################################################################

# logをとる　150306

data.glm <- glm(catch49 ~ temp1 + temp2 + log(catch12) + log(catch1), family = Gamma(link="log"), data = data)
summary(data.glm)
exp(predict(data.glm))
as.numeric(data.glm$fitted.values)
plot(data$year,data$catch49,type="l",ylim=c(0,20000))
lines(data$year,data.glm$fitted.values,col="red")

data.prd <- predict(data.glm, newdata=data.frame(temp1=17.86, temp2=16.62,catch12=2893.5,catch1=410.9),se.fit=TRUE) # for 2015
exp(data.prd$fit) # 20520.66 やはりでかい
exp(data.prd$fit - 1.96 * data.prd$se.fit) # 10078.6
exp(data.prd$fit + 1.96 * data.prd$se.fit) # 41781.37

#####################################################################################


# GLM計算部 2014.3 trial 全ての要因を入れてモデル選択
#data.glm <- glm(catch49 ~ temp11 + temp12 + temp1 + temp2 + catch11 + catch12 + catch1, family = gaussian(link="identity"), data = data)
#data.glm <- glm(catch49 ~ temp12 + temp1 + temp2 + catch111, family = gaussian(link="identity"), data = data)
#data.glm <- glm(catch49 ~ temp1 + temp2 + catch11 +catch12 + catch1, family = gaussian(link="identity"), data = data)
#data.glm <- glm(catch49 ~ catch111, family = gaussian(link="identity"), data = data)
data.glm <- glm(catch49 ~ temp12 + temp1 + temp2 + catch12 + catch1 + sonar2, family = gaussian(link="identity"), data = data)
library(MASS)
model.sel <- stepAIC(data.glm)
summary(model.sel)
as.numeric(model.sel$fitted.values)

#　漁獲量予測部
# heinen
data.prd <- predict(model.sel, newdata=data.frame(temp1=18.3, temp2=17.59,catch12=355.2,catch1=1015.6),se.fit=TRUE)
data.prd$fit
data.prd$fit - 1.96 * data.prd$se.fit
data.prd$fit + 1.96 * data.prd$se.fit

#####################################################################################

#forecast
library(forecast)
data.ts <- ts(data.ori$catch48,start=c(1992,1),frequency=1)
model <- auto.arima(data.ts,ic="aic",trace=T,stepwise=F)
tsdiag(model)
forecast(model,h=10)
plot(forecast(model,h=10))
summary(model)



#####################################################################################
Call:
glm(formula = catch48 ~ temp1 + temp2 + catch12 + catch1, family = gaussian(link = "identity"),
    data = data)

Deviance Residuals:
     13       14       15       16       17       18       19       20       21       22
  658.4   2672.4   1221.6   -326.6  -1789.4   -179.4    612.4    328.0  -3494.5    297.0

Coefficients:
              Estimate Std. Error t value Pr(>|t|)
(Intercept) -3883.0281 50625.3757  -0.077   0.9418
temp1       -1072.9850  1908.8836  -0.562   0.5983
temp2        1855.5143  3714.4548   0.500   0.6386
catch12         8.2584     3.9818   2.074   0.0928 .
catch1          0.5485     0.7024   0.781   0.4702
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for gaussian family taken to be 5038103)

    Null deviance: 85463014  on 9  degrees of freedom
Residual deviance: 25190513  on 5  degrees of freedom
AIC: 187.77

Number of Fisher Scoring iterations: 2
#####################################################################################

Call:
glm(formula = catch48 ~ catch12 + catch1, family = gaussian(link = "identity"),
    data = data)

Deviance Residuals:
    Min       1Q   Median       3Q      Max
-4156.0   -191.1    352.6    638.2   2150.3

Coefficients:
             Estimate Std. Error t value Pr(>|t|)
(Intercept) 8560.5651  1139.6361   7.512 0.000136 ***
catch12        6.6575     2.5541   2.607 0.035085 *
catch1         0.7829     0.3977   1.969 0.089679 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for gaussian family taken to be 3855666)

    Null deviance: 85463014  on 9  degrees of freedom
Residual deviance: 26989664  on 7  degrees of freedom
AIC: 184.46

Number of Fisher Scoring iterations: 2


###################################################################
Series: data.ts
ARIMA(1,0,0) with non-zero mean

Coefficients:
         ar1  intercept
      0.4351  11968.797
s.e.  0.1844   1056.366

sigma^2 estimated as 8381587:  log likelihood=-206.68
AIC=419.36   AICc=420.69   BIC=422.63

Training set error measures:
                   ME     RMSE      MAE       MPE     MAPE      MASE
Training set -6.06667 2895.097 2111.101 -10.59808 24.93979 0.8396507
###################################################################
